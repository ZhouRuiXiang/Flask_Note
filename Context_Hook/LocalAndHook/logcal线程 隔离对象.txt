# 线程隔离对象
Local对象：
在'Flask'中， 类似于'request'的对象， 其实是绑定到一个'werkzeug.local.local'对象上。这样，即使是同一个对象，那么在多个线程中都是隔离的。类似的对象还有'session'以及'g'对象。

Thread Local对象：
只要满足绑定到这个对象上的属性，在每个线程中都是隔离的，那么他就叫做'Thread Local'对象。


# 应用上下文和请求上下文
应用上下文和请求上下文都是存放到一个'LocalStack'的栈中。和应用app相关的操作就必须要用到应用上下文，比如通过'current_app'获取当前的这个'app'。和请求相关的操作就必须用到请求上下文，比如使用'url_for'反转视图函数。
1. 在视图函数中，不用担心上下文的问题。因为视图函数要执行，那么肯定是通过访问url的方式执行的，那么这种情况下，Flask底层已经自动的帮我们把请求上下文和应用上下文都推入到了相应的栈中。
2. 如果想要在视图函数外面执行相关的操作，比如获取当前的app(current_app)，或者是反转url，那么就必须手动推入相关的上下文:
	* 手动推入app上下文

		# 第一种方式：
		app_context = app.app_context()
		app_context.push()
		# 第二种方式：
		with app.app_context():
			print(current_app)

	* 手动推入请求上下文： 推入请求上下文到栈中，会首先判断是否有应用上下文，如果没有那么就会先推入应用上下文到栈中，然后再推入请求撒谎那个下文到栈中。

		#
		with app.test_request_context():
    		print(url_for('my_list'))

# 为什么应用上下文需要放在栈中：
1. 应用上下文： Flask底层是基于werkzeug, werkzeug是可以包含多个app的，所以这时候用一个栈来保存。用完一个app后，应该从栈中pop()出去，方便其他代码使用下面的app。
2. 如果在写测试代码，或者离线脚本的时候，我们有时候可能需要创建多个请求上下文，这个时候就需要存放到一个栈中。使用哪个请求上下文，就把对应的请求上下文放到栈的顶部，用完了就要把这个请求上下文从栈中移除掉。

# 在Flask中保存全局对象的g对象。
g对象是再整个Flask应用运行期间都是可以使用的，并且他也是跟request一样，是线程隔离对象，g对象专门用来存储开发者自己定义的或者用户request上来的数据，方便在整个Flask程序都可以使用，一般是一些复用性高的数据，将其绑定到g对象上，以后直接从g上面取。（可以理解为一个'全局变量库'）

# app.py
from flask import Flask,request
from flask import g
from utils import log_a,log_b
@app.route('/')
def hello_world():
    # print(current_app.name)
    username = request.args.get('username')
    g.username = username
    log_a()
    log_b()
    return 'Hello World!'
# utils.py
from flask import g

def log_a():
    print("%s做了a事情" % g.username)

def log_b():
    print("%s做了b事情" % g.username)


# 常用的钩子函数
在Flask中钩子函数是使用特定的装饰器装饰的函数，钩子函数可以在正常执行的代码中，插入一段想要执行的代码。（hook---钩子）
1. 'before_first_request': Flask项目第一次部署后会执行的钩子函数
2. 'before_request': 请求已经到达Flask，但是还没有进入到具体的视图函数之前调用。一般使用场景是在视图函数之前，我们可以把一些后面需要用到的数据先处理好，方便视图函数使用。

# before_request应用场景
例如在用户登录的时候，我们就在数据库中查询其对应的信息，提前准备好数据，方便后续使用。
# 钩子函数
@app.before_request
def before_request():
    user_id = session.get('user_id')
    if user_id:
        g.user = "xingchen"

# hasattr()检测用户是否登录，若登录从数据库中获取其信息。
@app.route('/')
def hello_world():
	if hasattr(g, 'user'):
        print(g.user)
    return 'Hello World!'
# 登录后获取它的id，并设置到session中
@app.route('/list/')
def my_list():
    session['user_id'] = 1
    return 'my list'

3. 'context_processor': 使用'context_processor'必须返回一个字典类型的值（可以是空字典），这个字典中的值可以在所有模板中使用，使用场景即有一部分变量需要在很多模板中使用，为了避免每一个模板都携带变量，代码冗余。'render_temlplate("xxx.html", 变量)'，则使用'context_processor'钩子函数。
# 'context_processor'使用场景
在首页以及每一个子页面都需要显示用户个人中心，个人中心中的数据，例如用户名，性别等个人信息都变量都需要传入。
@app.context_processor
def context_processor():
    # 一定要有return 若不写else 则默认 return None
    # return {'cur_user': 'xingchen'} / return {}
    if hasattr(g, 'user'):
        return {'cur_user': 'xingchen'}
    else:
        return {}
随后直接传入模板即可，模板中可以直接使用'context_processor'中定义好的变量。

4. 'eroorhandler': 在发生一些异常的时候，比如 404、500 等错误。那么如果想要优雅的处理这些错误，就可以使用'eroorhandler'。
* 装饰器中要传入状态码或错误类型
* 装饰器装饰的函数要传入'error'用来接收错误信息。名称可以自定义。
* flask.abort()可以手动抛出相应的错误。

from flask import abort

@app.errorhandler(AttributeError)
def server_error(error):
    # render_template()后接状态码表示返回相应的状态码，否则返回200状态码
    return render_template('500.html')


@app.errorhandler(404)
def page_not_found(error):
    return render_template('404.html'), 404


